{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/header.jpg","path":"img/header.jpg","modified":0,"renderable":0},{"_id":"source/img/Andrei.jpg","path":"img/Andrei.jpg","modified":0,"renderable":0},{"_id":"source/img/rsz_andrei.jpg","path":"img/rsz_andrei.jpg","modified":0,"renderable":0},{"_id":"source/img/developer.jpg","path":"img/developer.jpg","modified":0,"renderable":0},{"_id":"source/img/developer.jpeg","path":"img/developer.jpeg","modified":0,"renderable":0},{"_id":"source/img/pcb.png","path":"img/pcb.png","modified":0,"renderable":0},{"_id":"source/img/pcb2.jpg","path":"img/pcb2.jpg","modified":0,"renderable":0},{"_id":"source/img/mean.jpg","path":"img/mean.jpg","modified":0,"renderable":0},{"_id":"source/img/code.jpg","path":"img/code.jpg","modified":0,"renderable":0},{"_id":"source/img/code2.jpg","path":"img/code2.jpg","modified":0,"renderable":0},{"_id":"source/img/mongo.png","path":"img/mongo.png","modified":0,"renderable":0},{"_id":"source/img/express.png","path":"img/express.png","modified":0,"renderable":0},{"_id":"source/img/angular.png","path":"img/angular.png","modified":0,"renderable":0},{"_id":"source/img/nodejs.png","path":"img/nodejs.png","modified":0,"renderable":0},{"_id":"source/img/mean_bg.png","path":"img/mean_bg.png","modified":0,"renderable":0},{"_id":"source/img/mean_code.png","path":"img/mean_code.png","modified":0,"renderable":0},{"_id":"source/img/finished.png","path":"img/finished.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"683474336b38bdbe8154505911fa2627437bf93b","modified":1519851955427},{"_id":"themes/Anisina/.DS_Store","hash":"be5d5c310d80b19adda21b95f325b96bd8b12f8f","modified":1519325416018},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1519325416022},{"_id":"themes/Anisina/README.md","hash":"ebde4101f083169abf82f5d9aa6fa34959d5cf11","modified":1519325416022},{"_id":"themes/Anisina/_config.yml","hash":"06bccfc42b143659f59ea78938f00c217ac5574d","modified":1519325416038},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1519325416038},{"_id":"themes/Anisina/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519325415990},{"_id":"themes/Anisina/.git/config","hash":"34da9422497bf112885ff69d41ae9b25aa411184","modified":1519325415990},{"_id":"themes/Anisina/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519325412782},{"_id":"themes/Anisina/.git/index","hash":"d9c42093426a8d977e83b542d5b2444754c8efe0","modified":1519370555281},{"_id":"themes/Anisina/.git/packed-refs","hash":"4fa6fa919e27b1ffaac23772a152c351ca7144e5","modified":1519325415990},{"_id":"themes/Anisina/.idea/Anisina.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1519325416018},{"_id":"themes/Anisina/.idea/modules.xml","hash":"6f81355dee5b607683bdbd56595a930fb4b83c8b","modified":1519325416022},{"_id":"themes/Anisina/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1519325416022},{"_id":"themes/Anisina/.idea/workspace.xml","hash":"7c5d920658041056cc34836371895677b507001c","modified":1519325416022},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1519325416022},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1519325416038},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1519325416038},{"_id":"themes/Anisina/layout/.DS_Store","hash":"f60423538e7d115abf8c86b365e85ad35b418b25","modified":1519325416038},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1519325416038},{"_id":"themes/Anisina/layout/about.ejs","hash":"d409109a84aa5c032e1a230c973a91b293765176","modified":1519325416038},{"_id":"themes/Anisina/layout/archive.ejs","hash":"9233a4713382432b315f337adbf1db2b63082971","modified":1519325416038},{"_id":"themes/Anisina/layout/index.ejs","hash":"a94ac678f6b24a46824d45ec058b0ab2105a92c9","modified":1519325416038},{"_id":"themes/Anisina/layout/layout.ejs","hash":"b728827bf3ec55baf96a882032397e6c74c65f34","modified":1519325416038},{"_id":"themes/Anisina/layout/page.ejs","hash":"95bbc74aa6d10cddddd7a5cd5d2a06482f5ea173","modified":1519325416038},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1519325416038},{"_id":"themes/Anisina/layout/post.ejs","hash":"ace710b4e69c62305ff4d92822b566ecb8e317e2","modified":1519852512946},{"_id":"themes/Anisina/layout/tags.ejs","hash":"ff363455eeddfd389ecf6c5ab090408e1d2ef4e6","modified":1519325416038},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1519325416038},{"_id":"themes/Anisina/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519325412782},{"_id":"themes/Anisina/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519325412782},{"_id":"themes/Anisina/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519325412782},{"_id":"themes/Anisina/.git/logs/HEAD","hash":"ab72d2a5be346415fdcbe9312eaae99f751910df","modified":1519325415990},{"_id":"themes/Anisina/.idea/inspectionProfiles/Project_Default.xml","hash":"cb98213afbdfab7620cd4b6ba8801035079b4ae5","modified":1519325416022},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1519325416022},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"223a29b0154c2dcc5f8a6b6fee67ef78ead266ad","modified":1519325416038},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1519325416038},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"3baa41d595e951efa1db34dd1789c6f8d3b094da","modified":1519325416038},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1519325416038},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1519325416038},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1519325416042},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1519325416042},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1519325416042},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1519325416046},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1519325416046},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1519325416038},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1519325416042},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1519325416042},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519325416042},{"_id":"themes/Anisina/.git/objects/pack/pack-e4a802f99c87b7b93ecc93c668d835643a6b3624.idx","hash":"49ef7b2dd1b8927bb5e1ec045803b650142bcbc9","modified":1519325415954},{"_id":"themes/Anisina/.git/refs/heads/master","hash":"ffae89de3fdd4b094ca221452a0920087a775650","modified":1519325415990},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1519325416026},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1519325416042},{"_id":"themes/Anisina/.git/logs/refs/heads/master","hash":"ab72d2a5be346415fdcbe9312eaae99f751910df","modified":1519325415990},{"_id":"themes/Anisina/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519325415990},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1519325416030},{"_id":"themes/Anisina/.git/logs/refs/remotes/origin/HEAD","hash":"ab72d2a5be346415fdcbe9312eaae99f751910df","modified":1519325415990},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1519325416034},{"_id":"themes/Anisina/.git/objects/pack/pack-e4a802f99c87b7b93ecc93c668d835643a6b3624.pack","hash":"3f411160be81fe6a9e5c19d7f0755ee3a2f7ac57","modified":1519325415954},{"_id":"source/img/header.jpg","hash":"9db4460d0c60515df6a2087de4c0f7144d23c0e0","modified":1519326341459},{"_id":"source/img/Andrei.jpg","hash":"5b479be640d9a3fcf77aa0a79d53f39c839c1ccc","modified":1519326593198},{"_id":"source/img/rsz_andrei.jpg","hash":"509667d4fd508a88ecd7a0cb5bf8fdd1c3ba0c11","modified":1519328055983},{"_id":"source/img/developer.jpeg","hash":"c26cd8457c66c53710dd1ff751e5573bec497e4e","modified":1519328433058},{"_id":"source/img/developer.jpg","hash":"bf177d976e861d4488ab557178ebb87699666c82","modified":1519328260999},{"_id":"source/img/pcb.png","hash":"84b0c3a20eaa1f4e8e84e4a92cf50bcdb2a032ea","modified":1519328653222},{"_id":"source/img/pcb2.jpg","hash":"115da86adc5301d62c9216a8e24e934621558fb2","modified":1519328955781},{"_id":"source/img/mean.jpg","hash":"54c60ee3fcf12b94d5ca5f4f25266ea5f4418ca2","modified":1519329423564},{"_id":"source/img/code.jpg","hash":"805c82e2ba203f290fced4b03ed67a63025436b7","modified":1519329564640},{"_id":"source/img/code2.jpg","hash":"ca88ff1b40ded647185c0d4c952fcd7b05f7a736","modified":1519329901436},{"_id":"source/img/express.png","hash":"8422d2fe8c487e3958b08c92e20a063dd2d98a19","modified":1519331770218},{"_id":"source/img/mean_bg.png","hash":"2f9ea27df2d5b3fbfafdc1ca070ffe6f745db379","modified":1519332532198},{"_id":"source/img/mongo.png","hash":"3b5418a5c3199a737dc5d78bf6668b2391dd58b5","modified":1519331696962},{"_id":"source/img/nodejs.png","hash":"f0b8ccac0efee3bf16673a9c18ba6e33d24b3f63","modified":1519331878013},{"_id":"source/img/angular.png","hash":"ae60cca824cad49091b27377adc08b13620d5561","modified":1519331856873},{"_id":"source/img/mean_code.png","hash":"bf8142a1f2e54b91a60b4443d24d86fbf9aba272","modified":1519335643271},{"_id":"source/img/finished.png","hash":"0efa33a4b23c0770e7a1dd9f6b68fe98b68621da","modified":1519850168314},{"_id":"source/_posts/1-mean-app.md","hash":"64705e195821fd53efd45d77c3899140e14d9f10","modified":1519852080652}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Angular 5 MEAN app","subtitle":"Setting up MEAN app with angular cli and express-generator","date":"2018-02-28T21:08:00.648Z","author":"Andrei Sbitnev","header-img":"http://localhost:4000/img/mean_code.png","cdn":"header-off","_content":"## Quick Start\n\nTo build the project you need the [angular cli](https://github.com/angular/angular-cli) and [express-generator](https://expressjs.com/en/starter/generator.html) installed on your operating system.<br>\n\nYou will also need a [mongoDb](https://www.mongodb.com/download-center#community) either installed on your system, or running inside a Docker container. Since we\\`ll be Dockerizing the project in the next tutorial, we will use the container version.<br>\n\nTo run any docker container, [Docker](https://docs.docker.com/install/#time-based-release-schedule) must first be installed on your system. \n>Tip: Use a CE version<br>\n\nTo create and run a mongoDb container, just run the\n```bash\n$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo\n```\n>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running ``sudo docker container start mongodb`` or ``sudo docker container stop mongodb``.\n\n## Setting up the project\nCreate a new directory <b>smart-home</b> and cd into it.\n\n```bash\n$ mkdir smart-house && cd smart-house\n```\n\nStart a new Angular 5 project using angular cli\n\n```bash\n~/smart-home$ ng new fe\n```\n\nStart a new express project using express-generator\n\n```bash\n~/smart-home$ express be\n```\n\n## Configuring backend\nOpen up the project in your favorite text editor and open the ~/smart-home/be/app.js file\n\nWe will be using the <b>be</b> app only as a REST api, so we don\\`t need views or view engine. Remove the following lines from the file.\n\n```javascript\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n```\n\nAnd the views folder\n\n```bash\n~/smart-home$ rm -rf be/views\n```\n\nWe also won\\`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file\n\n```javascript\nvar favicon = require('serve-favicon');\n\napp.use(express.static(path.join(__dirname, 'public')));\n```\n\nAnd the public folder\n\n```bash\n~/smart-home$ rm -rf be/public\n```\n\nWe also won\\`t be needing the index route, so let\\`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.\n\n```javascript\nvar index = require('./routes/index');\n\napp.use('/', index);\n```\nAnd the index.js file from the ~/be/routes directory\n\n```bash\n~/smart-home$ rm be/routes/index.js\n```\n\nWe can also remove the unnecessary dependencies from the ~/be/package.json file.\n```javascript\n\"serve-favicon\": \"~2.4.5\"\n\n\"jade\": \"~1.11.0\",\n```\n>Tip: Don`t forget to remove the comma from the end of the package.json file.\n\nNow let\\`s install all the dependencies. Just cd into the ~/smart-home/be folder and run \n\n```bash\n~/smart-home/be$ npm install\n```\n\nAlthough it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let\\`s add it to the dependencies. Just cd into the ~/smart-home/be folder and run \n\n```bash\n~/smart-home/be$ npm install --save mongoose\n```\n\nNow let\\`s add mongoose to app.js\n```javascript\nvar mongoose = require('mongoose');\n```\nAnd connect to the database.\n```javascript\nmongoose.connect('mongodb://localhost/test');\n```\nSince our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.\n```javascript\n...\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\n...\n```\nThe final ~/be/app.js file should look like this\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar users = require('./routes/users');\nvar test = require('./routes/test');\n\nvar app = express();\nmongoose.connect('mongodb://localhost/test');\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\napp.use('/test', test);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n\n```\n## Simple server for the frontend\nIn this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br>\nGo to ~/smart-home/fe and add a new file server.js\n\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar app = express();\n\napp.use(express.static(path.join(__dirname, 'dist')));\n\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nIn the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br>\n\n```javascript\napp.use(express.static(path.join(__dirname, 'dist')));\n```\n\nWe then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br>\n\n```javascript\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n```\n\nThis is important, because all the routing and error handling in an angular app should be done on the frontend.<br>\n\nFinally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br>\n\n```javascript\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nLets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-home/fe and modify the <b>scripts</b> object in the package.json file. \n\n```json\n...\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"node server.js\",\n    \"dev\": \"ng serve\",\n    \"build\": \"ng build --prod\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n...\n```\nTo run the angular dev server use `npm run dev`. To run the app in production, first build it `npm run build`, and then run it `npm start`.\n\n## Testing the MEAN app components working together.\nThe MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br>\nFor this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br>\nWe won\\`t be going into further detail about angular or express at this point, because it\\`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we\\`ll be actually building the app.\n\nRun the `ng generate component test` to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br>\n\n~/smart-home/fe/src/app/app.component.html\n\n```html\n<app-test></app-test>\n```\n\n~/smart-home/fe/src/app/test/test.component.html\n\n```html\n<div>\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n    <label for=\"text\">Text</label>\n    <input type=\"text\" id=\"text\" name=\"text\" ngModel required>\n    <button type=\"submit\" [disabled]=\"!f.valid\">Submit</button>\n  </form>\n  <ul *ngFor=\"let text of textArr\">\n    <li>{{text}}</li>\n  </ul>\n</div>\n```\n\n~/smart-home/fe/src/app/test/test.component.ts\n\n```javascript\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/Rx';\n\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})\nexport class TestComponent implements OnInit {\n  @ViewChild('f') testForm: NgForm;\n  public textArr = [];\n  public httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  getTestData() {\n    this.http.get('http://localhost:3000/test')\n      .subscribe(\n        data => {\n          this.textArr = data['obj'].map(val => val['text']);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n\n  sendTestData(text) {\n    let body = JSON.stringify(text);\n    this.http.post('http://localhost:3000/test', body, this.httpOptions)\n      .subscribe(\n        data => {\n          this.testForm.resetForm();\n          this.getTestData();\n        },\n        error => {\n          console.log(error)\n        }\n      )\n  }\n\n  constructor(private http: HttpClient) {}\n  onSubmit(form: NgForm) {\n    this.sendTestData(form.value)\n  }\n  ngOnInit() {\n    this.getTestData()\n  }\n}\n```\n~/smart-home/fe/src/app/app.module.ts\n\n```javascript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TestComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nAdd a new directory <b>models</b> in ~/smart-home/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br>\n\n~/smart-home/be/models/test.js\n\n```javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar schema = new Schema({\n    text: {type: String, required: true},\n});\n\nmodule.exports = mongoose.model('Test', schema);\n```\n\nAdd a new routes file test.js\n\n~/smart-home/be/routes/test.js\n\n```javascript\nvar express = require('express');\nvar express = require('express');\nvar router = express.Router();\nvar Test = require('../models/test');\n\nrouter.get('/', function(req, res, next) {\n  Test.find()\n        .exec(function (err, textArr) {\n            if (err) {\n                return res.status(500).json({\n                    title: 'An error occurred',\n                    error: err\n                });\n            }\n            res.status(200).json({\n                message: 'Success',\n                obj: textArr\n            });\n        });\n});\n\nrouter.post('/', function(req, res, next) {\n  var text = req.body.text;\n  var test = new Test({text})\n  test.save();\n  res.status(200).json({\n    message: 'Success',\n  });\n});\n\nmodule.exports = router;\n\n```\n~/smart-home/be/app.js\n\n```javascript\n...\nvar users = require('./routes/users');\n// load the test model\nvar test = require('./routes/test');\n...\napp.use('/users', users);\n// add test router\napp.use('/test', test);\n...\n\n```\n## Starting the application\nTo test the application, first start the mongodb server\n>Tip: If it is set up in the Docker container, as described above, just run `sudo docker container start mongodb`<br>\n\nStart the backend server, by navigating inside the ~/smarthouse/be and running `npm start`<br>\nOpen up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running `npm run dev`<br>\nNow open the browser and go to [http://localhost:4200](http://localhost:4200), you should see a white page with one input field and a disabled \"submit\" button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.\n<img src=\"http://localhost:4000/img/finished.png\">","source":"_posts/1-mean-app.md","raw":"---\nlayout: post\ntitle: \"Angular 5 MEAN app\"\nsubtitle: \"Setting up MEAN app with angular cli and express-generator\"\ndate: 2018-22-02 21:54\nauthor: \"Andrei Sbitnev\"\nheader-img: \"http://localhost:4000/img/mean_code.png\"\ncdn: 'header-off'\ntags:\n\t- MEAN\n\t- Angular 5\n\t- Node.js\n\t- Express\n---\n## Quick Start\n\nTo build the project you need the [angular cli](https://github.com/angular/angular-cli) and [express-generator](https://expressjs.com/en/starter/generator.html) installed on your operating system.<br>\n\nYou will also need a [mongoDb](https://www.mongodb.com/download-center#community) either installed on your system, or running inside a Docker container. Since we\\`ll be Dockerizing the project in the next tutorial, we will use the container version.<br>\n\nTo run any docker container, [Docker](https://docs.docker.com/install/#time-based-release-schedule) must first be installed on your system. \n>Tip: Use a CE version<br>\n\nTo create and run a mongoDb container, just run the\n```bash\n$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo\n```\n>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running ``sudo docker container start mongodb`` or ``sudo docker container stop mongodb``.\n\n## Setting up the project\nCreate a new directory <b>smart-home</b> and cd into it.\n\n```bash\n$ mkdir smart-house && cd smart-house\n```\n\nStart a new Angular 5 project using angular cli\n\n```bash\n~/smart-home$ ng new fe\n```\n\nStart a new express project using express-generator\n\n```bash\n~/smart-home$ express be\n```\n\n## Configuring backend\nOpen up the project in your favorite text editor and open the ~/smart-home/be/app.js file\n\nWe will be using the <b>be</b> app only as a REST api, so we don\\`t need views or view engine. Remove the following lines from the file.\n\n```javascript\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n```\n\nAnd the views folder\n\n```bash\n~/smart-home$ rm -rf be/views\n```\n\nWe also won\\`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file\n\n```javascript\nvar favicon = require('serve-favicon');\n\napp.use(express.static(path.join(__dirname, 'public')));\n```\n\nAnd the public folder\n\n```bash\n~/smart-home$ rm -rf be/public\n```\n\nWe also won\\`t be needing the index route, so let\\`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.\n\n```javascript\nvar index = require('./routes/index');\n\napp.use('/', index);\n```\nAnd the index.js file from the ~/be/routes directory\n\n```bash\n~/smart-home$ rm be/routes/index.js\n```\n\nWe can also remove the unnecessary dependencies from the ~/be/package.json file.\n```javascript\n\"serve-favicon\": \"~2.4.5\"\n\n\"jade\": \"~1.11.0\",\n```\n>Tip: Don`t forget to remove the comma from the end of the package.json file.\n\nNow let\\`s install all the dependencies. Just cd into the ~/smart-home/be folder and run \n\n```bash\n~/smart-home/be$ npm install\n```\n\nAlthough it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let\\`s add it to the dependencies. Just cd into the ~/smart-home/be folder and run \n\n```bash\n~/smart-home/be$ npm install --save mongoose\n```\n\nNow let\\`s add mongoose to app.js\n```javascript\nvar mongoose = require('mongoose');\n```\nAnd connect to the database.\n```javascript\nmongoose.connect('mongodb://localhost/test');\n```\nSince our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.\n```javascript\n...\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\n...\n```\nThe final ~/be/app.js file should look like this\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar users = require('./routes/users');\nvar test = require('./routes/test');\n\nvar app = express();\nmongoose.connect('mongodb://localhost/test');\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use(function(req, res, next) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept\"\n  );\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"POST, GET, PATCH, DELETE, OPTIONS\"\n  );\n  next();\n});\n\napp.use('/users', users);\napp.use('/test', test);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n\n```\n## Simple server for the frontend\nIn this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br>\nGo to ~/smart-home/fe and add a new file server.js\n\n```javascript\nvar express = require('express');\nvar path = require('path');\nvar app = express();\n\napp.use(express.static(path.join(__dirname, 'dist')));\n\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nIn the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br>\n\n```javascript\napp.use(express.static(path.join(__dirname, 'dist')));\n```\n\nWe then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br>\n\n```javascript\napp.get('*', function (req, res) {\n    res.sendFile('index.html');\n});\n```\n\nThis is important, because all the routing and error handling in an angular app should be done on the frontend.<br>\n\nFinally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br>\n\n```javascript\napp.listen(4200, function () {\n  console.log('fe running on port 4200');\n});\n```\n\nLets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-home/fe and modify the <b>scripts</b> object in the package.json file. \n\n```json\n...\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"node server.js\",\n    \"dev\": \"ng serve\",\n    \"build\": \"ng build --prod\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n...\n```\nTo run the angular dev server use `npm run dev`. To run the app in production, first build it `npm run build`, and then run it `npm start`.\n\n## Testing the MEAN app components working together.\nThe MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br>\nFor this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br>\nWe won\\`t be going into further detail about angular or express at this point, because it\\`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we\\`ll be actually building the app.\n\nRun the `ng generate component test` to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br>\n\n~/smart-home/fe/src/app/app.component.html\n\n```html\n<app-test></app-test>\n```\n\n~/smart-home/fe/src/app/test/test.component.html\n\n```html\n<div>\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n    <label for=\"text\">Text</label>\n    <input type=\"text\" id=\"text\" name=\"text\" ngModel required>\n    <button type=\"submit\" [disabled]=\"!f.valid\">Submit</button>\n  </form>\n  <ul *ngFor=\"let text of textArr\">\n    <li>{{text}}</li>\n  </ul>\n</div>\n```\n\n~/smart-home/fe/src/app/test/test.component.ts\n\n```javascript\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/Rx';\n\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})\nexport class TestComponent implements OnInit {\n  @ViewChild('f') testForm: NgForm;\n  public textArr = [];\n  public httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  getTestData() {\n    this.http.get('http://localhost:3000/test')\n      .subscribe(\n        data => {\n          this.textArr = data['obj'].map(val => val['text']);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n\n  sendTestData(text) {\n    let body = JSON.stringify(text);\n    this.http.post('http://localhost:3000/test', body, this.httpOptions)\n      .subscribe(\n        data => {\n          this.testForm.resetForm();\n          this.getTestData();\n        },\n        error => {\n          console.log(error)\n        }\n      )\n  }\n\n  constructor(private http: HttpClient) {}\n  onSubmit(form: NgForm) {\n    this.sendTestData(form.value)\n  }\n  ngOnInit() {\n    this.getTestData()\n  }\n}\n```\n~/smart-home/fe/src/app/app.module.ts\n\n```javascript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TestComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nAdd a new directory <b>models</b> in ~/smart-home/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br>\n\n~/smart-home/be/models/test.js\n\n```javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar schema = new Schema({\n    text: {type: String, required: true},\n});\n\nmodule.exports = mongoose.model('Test', schema);\n```\n\nAdd a new routes file test.js\n\n~/smart-home/be/routes/test.js\n\n```javascript\nvar express = require('express');\nvar express = require('express');\nvar router = express.Router();\nvar Test = require('../models/test');\n\nrouter.get('/', function(req, res, next) {\n  Test.find()\n        .exec(function (err, textArr) {\n            if (err) {\n                return res.status(500).json({\n                    title: 'An error occurred',\n                    error: err\n                });\n            }\n            res.status(200).json({\n                message: 'Success',\n                obj: textArr\n            });\n        });\n});\n\nrouter.post('/', function(req, res, next) {\n  var text = req.body.text;\n  var test = new Test({text})\n  test.save();\n  res.status(200).json({\n    message: 'Success',\n  });\n});\n\nmodule.exports = router;\n\n```\n~/smart-home/be/app.js\n\n```javascript\n...\nvar users = require('./routes/users');\n// load the test model\nvar test = require('./routes/test');\n...\napp.use('/users', users);\n// add test router\napp.use('/test', test);\n...\n\n```\n## Starting the application\nTo test the application, first start the mongodb server\n>Tip: If it is set up in the Docker container, as described above, just run `sudo docker container start mongodb`<br>\n\nStart the backend server, by navigating inside the ~/smarthouse/be and running `npm start`<br>\nOpen up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running `npm run dev`<br>\nNow open the browser and go to [http://localhost:4200](http://localhost:4200), you should see a white page with one input field and a disabled \"submit\" button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.\n<img src=\"http://localhost:4000/img/finished.png\">","slug":"1-mean-app","published":1,"updated":"2018-02-28T21:08:00.652Z","_id":"cje7koqvl0000h8lweuczghn4","comments":1,"photos":[],"link":"","content":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>To build the project you need the <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"noopener\">angular cli</a> and <a href=\"https://expressjs.com/en/starter/generator.html\" target=\"_blank\" rel=\"noopener\">express-generator</a> installed on your operating system.<br></p>\n<p>You will also need a <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">mongoDb</a> either installed on your system, or running inside a Docker container. Since we`ll be Dockerizing the project in the next tutorial, we will use the container version.<br></p>\n<p>To run any docker container, <a href=\"https://docs.docker.com/install/#time-based-release-schedule\" target=\"_blank\" rel=\"noopener\">Docker</a> must first be installed on your system. </p>\n<blockquote>\n<p>Tip: Use a CE version<br></p>\n</blockquote>\n<p>To create and run a mongoDb container, just run the<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running <code>sudo docker container start mongodb</code> or <code>sudo docker container stop mongodb</code>.</p>\n</blockquote>\n<h2 id=\"Setting-up-the-project\"><a href=\"#Setting-up-the-project\" class=\"headerlink\" title=\"Setting up the project\"></a>Setting up the project</h2><p>Create a new directory <b>smart-home</b> and cd into it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir smart-house &amp;&amp; <span class=\"built_in\">cd</span> smart-house</span><br></pre></td></tr></table></figure>\n<p>Start a new Angular 5 project using angular cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ ng new fe</span><br></pre></td></tr></table></figure>\n<p>Start a new express project using express-generator</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ express be</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuring-backend\"><a href=\"#Configuring-backend\" class=\"headerlink\" title=\"Configuring backend\"></a>Configuring backend</h2><p>Open up the project in your favorite text editor and open the ~/smart-home/be/app.js file</p>\n<p>We will be using the <b>be</b> app only as a REST api, so we don`t need views or view engine. Remove the following lines from the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view engine setup</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, path.join(__dirname, <span class=\"string\">'views'</span>));</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'jade'</span>);</span><br></pre></td></tr></table></figure>\n<p>And the views folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ rm -rf be/views</span><br></pre></td></tr></table></figure>\n<p>We also won`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public'</span>)));</span><br></pre></td></tr></table></figure>\n<p>And the public folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ rm -rf be/public</span><br></pre></td></tr></table></figure>\n<p>We also won`t be needing the index route, so let`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, index);</span><br></pre></td></tr></table></figure>\n<p>And the index.js file from the ~/be/routes directory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ rm be/routes/index.js</span><br></pre></td></tr></table></figure>\n<p>We can also remove the unnecessary dependencies from the ~/be/package.json file.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.4.5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"jade\"</span>: <span class=\"string\">\"~1.11.0\"</span>,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: Don`t forget to remove the comma from the end of the package.json file.</p>\n</blockquote>\n<p>Now let`s install all the dependencies. Just cd into the ~/smart-home/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home/be$ npm install</span><br></pre></td></tr></table></figure>\n<p>Although it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let`s add it to the dependencies. Just cd into the ~/smart-home/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home/be$ npm install --save mongoose</span><br></pre></td></tr></table></figure>\n<p>Now let`s add mongoose to app.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>And connect to the database.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Since our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>The final ~/be/app.js file should look like this<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\">app.use(logger(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\">app.use(<span class=\"string\">'/test'</span>, test);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// catch 404 and forward to error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not Found'</span>);</span><br><span class=\"line\">  err.status = <span class=\"number\">404</span>;</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// set locals, only providing error in development</span></span><br><span class=\"line\">  res.locals.message = err.message;</span><br><span class=\"line\">  res.locals.error = req.app.get(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span> ? err : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render the error page</span></span><br><span class=\"line\">  res.status(err.status || <span class=\"number\">500</span>);</span><br><span class=\"line\">  res.render(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = app;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Simple-server-for-the-frontend\"><a href=\"#Simple-server-for-the-frontend\" class=\"headerlink\" title=\"Simple server for the frontend\"></a>Simple server for the frontend</h2><p>In this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br><br>Go to ~/smart-home/fe and add a new file server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>In the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br></pre></td></tr></table></figure>\n<p>We then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This is important, because all the routing and error handling in an angular app should be done on the frontend.<br></p>\n<p>Finally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Lets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-home/fe and modify the <b>scripts</b> object in the package.json file. </p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"ng\": \"ng\",</span><br><span class=\"line\">    \"start\": \"node server.js\",</span><br><span class=\"line\">    \"dev\": \"ng serve\",</span><br><span class=\"line\">    \"build\": \"ng build --prod\",</span><br><span class=\"line\">    \"test\": \"ng test\",</span><br><span class=\"line\">    \"lint\": \"ng lint\",</span><br><span class=\"line\">    \"e2e\": \"ng e2e\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>To run the angular dev server use <code>npm run dev</code>. To run the app in production, first build it <code>npm run build</code>, and then run it <code>npm start</code>.</p>\n<h2 id=\"Testing-the-MEAN-app-components-working-together\"><a href=\"#Testing-the-MEAN-app-components-working-together\" class=\"headerlink\" title=\"Testing the MEAN app components working together.\"></a>Testing the MEAN app components working together.</h2><p>The MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br><br>For this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br><br>We won`t be going into further detail about angular or express at this point, because it`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we`ll be actually building the app.</p>\n<p>Run the <code>ng generate component test</code> to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br></p>\n<p>~/smart-home/fe/src/app/app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-test</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-home/fe/src/app/test/test.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(f)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"text\"</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!f.valid\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let text of textArr\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-home/fe/src/app/test/test.component.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient, HttpHeaders &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-test'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./test.component.html'</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">'./test.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">  @ViewChild(<span class=\"string\">'f'</span>) testForm: NgForm;</span><br><span class=\"line\">  public textArr = [];</span><br><span class=\"line\">  public httpOptions = &#123;</span><br><span class=\"line\">    headers: <span class=\"keyword\">new</span> HttpHeaders(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTestData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.get(<span class=\"string\">'http://localhost:3000/test'</span>)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.textArr = data[<span class=\"string\">'obj'</span>].map(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[<span class=\"string\">'text'</span>]);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sendTestData(text) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(text);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.post(<span class=\"string\">'http://localhost:3000/test'</span>, body, <span class=\"keyword\">this</span>.httpOptions)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.testForm.resetForm();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getTestData();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(private http: HttpClient) &#123;&#125;</span><br><span class=\"line\">  onSubmit(form: NgForm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sendTestData(form.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getTestData()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>~/smart-home/fe/src/app/app.module.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TestComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test/test.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClientModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent,</span><br><span class=\"line\">    TestComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    FormsModule,</span><br><span class=\"line\">    HttpClientModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>Add a new directory <b>models</b> in ~/smart-home/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br></p>\n<p>~/smart-home/be/models/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    text: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Test'</span>, schema);</span><br></pre></td></tr></table></figure>\n<p>Add a new routes file test.js</p>\n<p>~/smart-home/be/routes/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> Test = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  Test.find()</span><br><span class=\"line\">        .exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, textArr</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).json(&#123;</span><br><span class=\"line\">                    title: <span class=\"string\">'An error occurred'</span>,</span><br><span class=\"line\">                    error: err</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">                message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">                obj: textArr</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text = req.body.text;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Test(&#123;text&#125;)</span><br><span class=\"line\">  test.save();</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>~/smart-home/be/app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"comment\">// load the test model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/test'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\"><span class=\"comment\">// add test router</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/test'</span>, test);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"Starting-the-application\"><a href=\"#Starting-the-application\" class=\"headerlink\" title=\"Starting the application\"></a>Starting the application</h2><p>To test the application, first start the mongodb server</p>\n<blockquote>\n<p>Tip: If it is set up in the Docker container, as described above, just run <code>sudo docker container start mongodb</code><br></p>\n</blockquote>\n<p>Start the backend server, by navigating inside the ~/smarthouse/be and running <code>npm start</code><br><br>Open up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running <code>npm run dev</code><br><br>Now open the browser and go to <a href=\"http://localhost:4200\">http://localhost:4200</a>, you should see a white page with one input field and a disabled “submit” button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.<br><img src=\"http://localhost:4000/img/finished.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>To build the project you need the <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"noopener\">angular cli</a> and <a href=\"https://expressjs.com/en/starter/generator.html\" target=\"_blank\" rel=\"noopener\">express-generator</a> installed on your operating system.<br></p>\n<p>You will also need a <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">mongoDb</a> either installed on your system, or running inside a Docker container. Since we`ll be Dockerizing the project in the next tutorial, we will use the container version.<br></p>\n<p>To run any docker container, <a href=\"https://docs.docker.com/install/#time-based-release-schedule\" target=\"_blank\" rel=\"noopener\">Docker</a> must first be installed on your system. </p>\n<blockquote>\n<p>Tip: Use a CE version<br></p>\n</blockquote>\n<p>To create and run a mongoDb container, just run the<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo docker container run --name mongodb -d -p 127.0.0.1:27017:27017 mongo</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>TIP: -d - means run detached, -p - port forwarding, mongodb - is the name of your container. You can then start and stop the container by running <code>sudo docker container start mongodb</code> or <code>sudo docker container stop mongodb</code>.</p>\n</blockquote>\n<h2 id=\"Setting-up-the-project\"><a href=\"#Setting-up-the-project\" class=\"headerlink\" title=\"Setting up the project\"></a>Setting up the project</h2><p>Create a new directory <b>smart-home</b> and cd into it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir smart-house &amp;&amp; <span class=\"built_in\">cd</span> smart-house</span><br></pre></td></tr></table></figure>\n<p>Start a new Angular 5 project using angular cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ ng new fe</span><br></pre></td></tr></table></figure>\n<p>Start a new express project using express-generator</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ express be</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuring-backend\"><a href=\"#Configuring-backend\" class=\"headerlink\" title=\"Configuring backend\"></a>Configuring backend</h2><p>Open up the project in your favorite text editor and open the ~/smart-home/be/app.js file</p>\n<p>We will be using the <b>be</b> app only as a REST api, so we don`t need views or view engine. Remove the following lines from the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view engine setup</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, path.join(__dirname, <span class=\"string\">'views'</span>));</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'jade'</span>);</span><br></pre></td></tr></table></figure>\n<p>And the views folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ rm -rf be/views</span><br></pre></td></tr></table></figure>\n<p>We also won`t be serving any static files or a favicon with the <b>be</b> app, so remove the following lines from the ~/be/app.js file</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public'</span>)));</span><br></pre></td></tr></table></figure>\n<p>And the public folder</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ rm -rf be/public</span><br></pre></td></tr></table></figure>\n<p>We also won`t be needing the index route, so let`s remove it from the project. Remove the following lines from the from the ~/be/app.js file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, index);</span><br></pre></td></tr></table></figure>\n<p>And the index.js file from the ~/be/routes directory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home$ rm be/routes/index.js</span><br></pre></td></tr></table></figure>\n<p>We can also remove the unnecessary dependencies from the ~/be/package.json file.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.4.5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"jade\"</span>: <span class=\"string\">\"~1.11.0\"</span>,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Tip: Don`t forget to remove the comma from the end of the package.json file.</p>\n</blockquote>\n<p>Now let`s install all the dependencies. Just cd into the ~/smart-home/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home/be$ npm install</span><br></pre></td></tr></table></figure>\n<p>Although it is possible to communicate with mongoDb without any additional packages, we will be using the Mongoose.js library for that purpose. So let`s add it to the dependencies. Just cd into the ~/smart-home/be folder and run </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/smart-home/be$ npm install --save mongoose</span><br></pre></td></tr></table></figure>\n<p>Now let`s add mongoose to app.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>And connect to the database.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Since our frontend and backend will be running as separate services on different ports, or maybe even on different servers, we need to set appropriate headers, to allow frontend send requests to the backend.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>The final ~/be/app.js file should look like this<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\">app.use(logger(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"POST, GET, PATCH, DELETE, OPTIONS\"</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\">app.use(<span class=\"string\">'/test'</span>, test);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// catch 404 and forward to error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not Found'</span>);</span><br><span class=\"line\">  err.status = <span class=\"number\">404</span>;</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// set locals, only providing error in development</span></span><br><span class=\"line\">  res.locals.message = err.message;</span><br><span class=\"line\">  res.locals.error = req.app.get(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span> ? err : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render the error page</span></span><br><span class=\"line\">  res.status(err.status || <span class=\"number\">500</span>);</span><br><span class=\"line\">  res.render(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = app;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Simple-server-for-the-frontend\"><a href=\"#Simple-server-for-the-frontend\" class=\"headerlink\" title=\"Simple server for the frontend\"></a>Simple server for the frontend</h2><p>In this project build we are using angular cli, which is a simple and powerful tool for building and running angular applications in development. It comes with a preconfigured testing environment and a dev server, but it is not a good idea to use the dev server in production. Lets next setup a simple production server for angular.<br><br>Go to ~/smart-home/fe and add a new file server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>In the code above we add a static directory, which will hold all of our static files and most importantly the bundle.js file. By default angular cli will create a bundle in the dist folder of your project.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'dist'</span>)));</span><br></pre></td></tr></table></figure>\n<p>We then setup a single endpoint with a wildcard *, which will always get called, no matter what is specified in the url.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">'index.html'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>This is important, because all the routing and error handling in an angular app should be done on the frontend.<br></p>\n<p>Finally we add a server to listen on port 4200, which is the same port used to serve the application by angular dev server.<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.listen(<span class=\"number\">4200</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fe running on port 4200'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Lets now modify the <b>fe</b> package.json file to use the newly created server. Go to  ~/smart-home/fe and modify the <b>scripts</b> object in the package.json file. </p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"ng\": \"ng\",</span><br><span class=\"line\">    \"start\": \"node server.js\",</span><br><span class=\"line\">    \"dev\": \"ng serve\",</span><br><span class=\"line\">    \"build\": \"ng build --prod\",</span><br><span class=\"line\">    \"test\": \"ng test\",</span><br><span class=\"line\">    \"lint\": \"ng lint\",</span><br><span class=\"line\">    \"e2e\": \"ng e2e\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>To run the angular dev server use <code>npm run dev</code>. To run the app in production, first build it <code>npm run build</code>, and then run it <code>npm start</code>.</p>\n<h2 id=\"Testing-the-MEAN-app-components-working-together\"><a href=\"#Testing-the-MEAN-app-components-working-together\" class=\"headerlink\" title=\"Testing the MEAN app components working together.\"></a>Testing the MEAN app components working together.</h2><p>The MEAN app is basically setup by now, but it would be great to test if angular, express and mongoDb are correctly set up and can communicate with each other.<br><br>For this purpose we will add a <b>test</b> component to our angular app, which will have a form with a single input and a button. The form will be sent to the backend, and then saved to mongoDb in the <b>test</b> database. We will also fetch all the values from the <b>test</b> database and display them below the form as a list.<br><br>We won`t be going into further detail about angular or express at this point, because it`s not the purpose of this tutorial. All the steps will be shown and described in upcoming tutorials, when we`ll be actually building the app.</p>\n<p>Run the <code>ng generate component test</code> to add a new component to angular app. Below are listed all the files, that need to be added or changed for the test app to run correctly, and what they should contain.<br></p>\n<p>~/smart-home/fe/src/app/app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-test</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-home/fe/src/app/test/test.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">f</span>=<span class=\"string\">\"ngForm\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"onSubmit(f)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"text\"</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ngModel</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!f.valid\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let text of textArr\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>~/smart-home/fe/src/app/test/test.component.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient, HttpHeaders &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-test'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./test.component.html'</span>,</span><br><span class=\"line\">  styleUrls: [<span class=\"string\">'./test.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">  @ViewChild(<span class=\"string\">'f'</span>) testForm: NgForm;</span><br><span class=\"line\">  public textArr = [];</span><br><span class=\"line\">  public httpOptions = &#123;</span><br><span class=\"line\">    headers: <span class=\"keyword\">new</span> HttpHeaders(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTestData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.get(<span class=\"string\">'http://localhost:3000/test'</span>)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.textArr = data[<span class=\"string\">'obj'</span>].map(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[<span class=\"string\">'text'</span>]);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sendTestData(text) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(text);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.http.post(<span class=\"string\">'http://localhost:3000/test'</span>, body, <span class=\"keyword\">this</span>.httpOptions)</span><br><span class=\"line\">      .subscribe(</span><br><span class=\"line\">        data =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.testForm.resetForm();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getTestData();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error =&gt; &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(private http: HttpClient) &#123;&#125;</span><br><span class=\"line\">  onSubmit(form: NgForm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sendTestData(form.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getTestData()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>~/smart-home/fe/src/app/app.module.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TestComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test/test.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClientModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent,</span><br><span class=\"line\">    TestComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    FormsModule,</span><br><span class=\"line\">    HttpClientModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>Add a new directory <b>models</b> in ~/smart-home/be, which will hold the mongoose.js models, and add a <b>test</b> model.<br></p>\n<p>~/smart-home/be/models/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    text: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Test'</span>, schema);</span><br></pre></td></tr></table></figure>\n<p>Add a new routes file test.js</p>\n<p>~/smart-home/be/routes/test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> Test = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  Test.find()</span><br><span class=\"line\">        .exec(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, textArr</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).json(&#123;</span><br><span class=\"line\">                    title: <span class=\"string\">'An error occurred'</span>,</span><br><span class=\"line\">                    error: err</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">                message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">                obj: textArr</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text = req.body.text;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Test(&#123;text&#125;)</span><br><span class=\"line\">  test.save();</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).json(&#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Success'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>~/smart-home/be/app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"comment\">// load the test model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/test'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br><span class=\"line\"><span class=\"comment\">// add test router</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/test'</span>, test);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"Starting-the-application\"><a href=\"#Starting-the-application\" class=\"headerlink\" title=\"Starting the application\"></a>Starting the application</h2><p>To test the application, first start the mongodb server</p>\n<blockquote>\n<p>Tip: If it is set up in the Docker container, as described above, just run <code>sudo docker container start mongodb</code><br></p>\n</blockquote>\n<p>Start the backend server, by navigating inside the ~/smarthouse/be and running <code>npm start</code><br><br>Open up another terminal and start an angular app, by navigating inside the ~/smarthouse/fe and running <code>npm run dev</code><br><br>Now open the browser and go to <a href=\"http://localhost:4200\">http://localhost:4200</a>, you should see a white page with one input field and a disabled “submit” button. Enter something in the input field and submit it to the server. The submitted text should appear below the form as a line in a list. You can now refresh the page, and the list should remain unchanged.<br><img src=\"http://localhost:4000/img/finished.png\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6n0000qxlw9f07r3h5","_id":"cje7koqvm0001h8lwghwk5blq"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6o0001qxlw1zunv0c8","_id":"cje7koqvm0002h8lw69s9ptny"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6p0002qxlwr5q6l58n","_id":"cje7koqvn0003h8lwplnbifmp"},{"post_id":"cje7koqvl0000h8lweuczghn4","tag_id":"cjdzjfl6p0003qxlw1w0boxaw","_id":"cje7koqvn0004h8lwbf8u6aof"}],"Tag":[{"name":"Movies","_id":"cjdyw8rkv0000x7lwye563q08"},{"name":"Life","_id":"cjdyw8rky0001x7lwdqnoinb2"},{"name":"MEAN","_id":"cjdzjfl6n0000qxlw9f07r3h5"},{"name":"Angular 5","_id":"cjdzjfl6o0001qxlw1zunv0c8"},{"name":"Node.js","_id":"cjdzjfl6p0002qxlwr5q6l58n"},{"name":"Express","_id":"cjdzjfl6p0003qxlw1w0boxaw"}]}}